// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/szczynk/MyGram/models"
)

// SocialMediaRepo is an autogenerated mock type for the SocialMediaRepo type
type SocialMediaRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *SocialMediaRepo) Delete(_a0 context.Context, _a1 uint) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: _a0, _a1, _a2
func (_m *SocialMediaRepo) Fetch(_a0 context.Context, _a1 *[]models.SocialMedia, _a2 uint) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]models.SocialMedia, uint) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserID provides a mock function with given fields: _a0, _a1, _a2
func (_m *SocialMediaRepo) GetByUserID(_a0 context.Context, _a1 *models.SocialMedia, _a2 uint) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SocialMedia, uint) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *SocialMediaRepo) Store(_a0 context.Context, _a1 *models.SocialMedia) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.SocialMedia) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *SocialMediaRepo) Update(_a0 context.Context, _a1 models.SocialMedia, _a2 uint) (models.SocialMedia, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 models.SocialMedia
	if rf, ok := ret.Get(0).(func(context.Context, models.SocialMedia, uint) models.SocialMedia); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(models.SocialMedia)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.SocialMedia, uint) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSocialMediaRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewSocialMediaRepo creates a new instance of SocialMediaRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSocialMediaRepo(t mockConstructorTestingTNewSocialMediaRepo) *SocialMediaRepo {
	mock := &SocialMediaRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
